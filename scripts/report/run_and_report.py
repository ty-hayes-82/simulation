#!/usr/bin/env python3
"""
Convenience script that runs your simulation and automatically generates reports.
Integrates with optimize_staffing_policy_two_pass.py workflow.
"""

import argparse
import subprocess
import sys
import time
from pathlib import Path
from typing import List, Optional


def run_simulation(course_dir: str, tee_scenario: str, orders_levels: List[int], 
                  runner_range: int, concurrency: int, auto_report: bool = True) -> Optional[Path]:
    """Run the simulation and return the output directory path"""
    
    orders_str = " ".join(map(str, orders_levels))
    cmd = [
        sys.executable, "scripts/optimization/optimize_staffing_policy_two_pass.py",
        "--course-dir", course_dir,
        "--tee-scenario", tee_scenario,
        "--orders-levels", *map(str, orders_levels),
        "--runner-range", str(runner_range),
        "--concurrency", str(concurrency)
    ]
    
    if auto_report:
        cmd.append("--auto-report")
    
    print(f"🚀 Running simulation: {' '.join(cmd)}")
    print("   This may take several minutes...")
    
    start_time = time.time()
    result = subprocess.run(cmd, cwd=Path.cwd())
    elapsed = time.time() - start_time
    
    if result.returncode != 0:
        print(f"❌ Simulation failed after {elapsed:.1f}s")
        return None
    
    print(f"✅ Simulation completed in {elapsed:.1f}s")
    
    # Find the most recent output directory
    course_name = Path(course_dir).name
    output_base = Path("output") / course_name
    
    if not output_base.exists():
        print(f"❌ Output directory not found: {output_base}")
        return None
    
    # Find most recent scenario directory
    scenario_dirs = list(output_base.glob("*_*_*"))  # timestamp pattern
    if not scenario_dirs:
        print(f"❌ No scenario directories found in {output_base}")
        return None
    
    latest_scenario = max(scenario_dirs, key=lambda p: p.stat().st_mtime)
    print(f"📁 Latest scenario: {latest_scenario}")
    
    return latest_scenario


def generate_reports(scenario_dir: Path) -> bool:
    """Generate reports for all runs in the scenario"""
    
    print(f"📊 Generating reports for {scenario_dir}")
    
    # Run auto_report.py
    cmd = [
        sys.executable, "scripts/report/auto_report.py",
        "--scenario-dir", str(scenario_dir)
    ]
    
    result = subprocess.run(cmd, cwd=Path.cwd())
    
    if result.returncode != 0:
        print("❌ Report generation failed")
        return False
    
    print("✅ Reports generated successfully")
    
    # Open the scenario index
    index_path = scenario_dir / "index.html"
    if index_path.exists():
        print(f"🎯 Opening scenario index: {index_path}")
        subprocess.run(["start", str(index_path)], shell=True)
    
    return True


def main(argv: Optional[List[str]] = None) -> int:
    parser = argparse.ArgumentParser(description="Run simulation and auto-generate reports")
    parser.add_argument("--course-dir", default="courses/pinetree_country_club", help="Course directory")
    parser.add_argument("--tee-scenario", default="real_tee_sheet", help="Tee scenario")
    parser.add_argument("--orders-levels", nargs="+", type=int, default=[30, 40], help="Order levels to test")
    parser.add_argument("--runner-range", type=int, default=2, help="Runner range")
    parser.add_argument("--concurrency", type=int, default=10, help="Concurrency level")
    parser.add_argument("--reports-only", action="store_true", help="Skip simulation, only generate reports for latest scenario")
    args = parser.parse_args(argv)
    
    if args.reports_only:
        # Find latest scenario and generate reports
        course_name = Path(args.course_dir).name
        output_base = Path("output") / course_name
        
        if not output_base.exists():
            print(f"❌ Output directory not found: {output_base}")
            return 1
        
        scenario_dirs = list(output_base.glob("*_*_*"))
        if not scenario_dirs:
            print(f"❌ No scenario directories found in {output_base}")
            return 1
        
        latest_scenario = max(scenario_dirs, key=lambda p: p.stat().st_mtime)
        print(f"📁 Using latest scenario: {latest_scenario}")
        
        return 0 if generate_reports(latest_scenario) else 1
    
    # Run simulation
    scenario_dir = run_simulation(
        args.course_dir, args.tee_scenario, args.orders_levels, 
        args.runner_range, args.concurrency, auto_report=True
    )
    
    if not scenario_dir:
        return 1
    
    # Reports are already generated by --auto-report flag
    print("\n🎉 Complete! Reports were automatically generated during simulation.")
    
    # Open the scenario index if it exists
    index_path = scenario_dir / "index.html"
    if index_path.exists():
        print(f"🎯 Opening scenario index: {index_path}")
        subprocess.run(["start", str(index_path)], shell=True)
    
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
