---
description: Format and structure requirements for coordinates.csv files
globs: golfsim/io/*.py,my-map-animation/**/*.tsx,my-map-animation/**/*.ts
---

# Coordinates CSV Format and Usage

## CSV Structure
The [coordinates.csv](mdc:outputs/*/run_*/coordinates.csv) file uses a unified format for all entity types:

```csv
id,latitude,longitude,timestamp,type,hole,visibility_status,time_since_last_sighting_min,pulsing,total_orders,total_revenue,avg_per_order,revenue_per_hour,avg_order_time_min
```

## Entity Types and ID Patterns

### Delivery Runners
- **ID Format**: `runner_1`, `runner_2`, etc.
- **Type**: `runner`
- **Hole**: Current delivery target hole number
- **Coordinates**: Generated from routing graph nodes at 60-second intervals
- **Generated by**: [interpolate_path_points()](mdc:golfsim/simulation/tracks.py)

### Golfer Groups  
- **ID Format**: `golfer_group_1`, `golfer_group_2`, etc.
- **Type**: `golfer`
- **Hole**: Current hole or "clubhouse"
- **Coordinates**: Generated from holes_connected.geojson nodes
- **Generated by**: [generate_golfer_points_for_groups()](mdc:golfsim/simulation/tracks.py)

### Beverage Carts
- **ID Format**: `bev_cart_1`, `bev_cart_2`, etc.  
- **Type**: `beverage_cart`
- **Hole**: Current service area
- **Coordinates**: Generated from cart path traversal
- **Generated by**: BeverageCartService coordinate tracking

## Coordinate Generation Requirements

### Timing Consistency
- All coordinates use 60-second intervals for smooth animation
- Timestamps are seconds since 7:00 AM simulation start
- React animation handles interpolation between points

### Spatial Accuracy
- Coordinates must be valid WGS84 lat/lng values
- Runner coordinates follow actual cart path routes
- Golfer coordinates follow hole-to-hole progression

### Data Completeness
- Missing entity coordinates result in animation gaps
- Empty coordinate streams cause visualization errors
- All active entities should have coordinate data

## Animation Integration
The [AnimationView.tsx](mdc:my-map-animation/src/views/AnimationView.tsx) component expects:
- Consistent entity IDs across time
- Monotonic timestamp progression  
- Valid coordinate pairs for all entries
- Type-specific styling based on 'type' field

## Writing Coordinates
Use [write_unified_coordinates_csv()](mdc:golfsim/io/results.py) for all coordinate output:
```python
# Group coordinates by entity ID
points_by_id = {
    "runner_1": runner_coordinate_list,
    "golfer_group_1": golfer_coordinate_list,
}
write_unified_coordinates_csv(points_by_id, output_path / "coordinates.csv")
```

## Validation Checklist
- [ ] All entity IDs are consistent and descriptive
- [ ] Timestamps are in ascending order within each entity
- [ ] Coordinates are valid lat/lng values
- [ ] Type field matches expected entity types
- [ ] No missing coordinate gaps for active entities